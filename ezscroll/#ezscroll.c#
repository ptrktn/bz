/* ------------------------------------------------------------------------- *
 *                                                                           *
 *                                EZ-SCROLL                                  *
 *                    A Code for Simulating Scroll Waves                     *
 *                                                                           *
 *       Copyright (C) 1996, 1997, 1998  Dwight Barkley and Matthew Dowle    *
 *                                       barkley@maths.warwick.ac.uk         *
 *                                                                           *
 *                                Version 1.4                                *
 *                                                                           *
 * ------------------------------------------------------------------------- *
 * RCS Information
 * ---------------------------
 * $Revision: 1.1.1.1 $
 * $Date: 2003/07/05 15:08:18 $
 * ------------------------------------------------------------------------- */

#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include <math.h>
#include "ezscroll.h"

/* 
 * Global variables used throughout the EZ-Scroll Code (see ezscroll.h)
 * -------------------------------------------------------------------- */

Real *fields, *u, *v, *sigma_u, *sigma_v;
Real  a_param, b_param, one_o_eps, delta, grid_h, dt, 
      dt_o_eps, dt_o_2eps, one_o_a, b_o_a, dt_o_wh2, dtDv_o_wh2;
int   nx, ny, nz, field_size, nsteps, istep, write_filament, 
      simulating_resolution, rotating_resolution,         
      verbose, plot_step, hist_step; 

/* Global variables for this file only
 * ----------------------------------- */

static  Real  length_x, length_y, length_z, Dv, ts;
static  int   hist_x, hist_y, hist_z, 
              ic_type, binary_write;
static  FILE *history_file, *filament_file; 

/* Private functions 
 * ----------------- */

static void  Initialize      (int argc, char **argv);
static void  Allocate_memory (void);
static void  Write_fc        (void);
static void  Read_ic         (void);
static void  Generate_ic     (void);

#define NEXT_LINE(fp) while(getc(fp)!='\n');  /* macro used to skip to end 
						 of input line */

/* ========================================================================= */

int main(int argc, char **argv)
{
  istep = 0;
  Initialize(argc, argv);
#ifndef _GLONLY  
  for(istep=0; istep<nsteps; istep++) {
    if( Event_check() )          break;
    if( (istep%plot_step) == 0 ) Draw();

    if( hist_step && (istep%hist_step)==0 ) Write_history(istep);
    Step();
  }

  Finish_up();
#endif /* _GLONLY */
  return 0;
}
/* ========================================================================= */

void Initialize (int argc, char **argv)
{
  /* Read task file, open output files, and initialize graphics and time
   * stepping.  */

  double p_in;
  FILE *fp;
  int initial_field;

  /* ----------------------------- 
   * Read parameters from task.dat 
   * ----------------------------- */

  if((fp=fopen("task.dat","r"))==NULL) {
    if(verbose) fprintf(stderr,"Cannot open task file: task.dat \n");
    exit(1);
  }
  else {
    fscanf(fp,"%lg",&p_in);  NEXT_LINE(fp); a_param=p_in;
    fscanf(fp,"%lg",&p_in);  NEXT_LINE(fp); b_param=p_in;
    fscanf(fp,"%lg",&p_in);  NEXT_LINE(fp); one_o_eps=p_in;
    fscanf(fp,"%lg",&p_in);  NEXT_LINE(fp); length_x=p_in;
    fscanf(fp,"%lg",&p_in);  NEXT_LINE(fp); Dv=p_in;
                             NEXT_LINE(fp);
    fscanf(fp,"%d", &nx);    
    fscanf(fp,",%d",&ny);    
    fscanf(fp,",%d",&nz);    NEXT_LINE(fp);
    fscanf(fp,"%lg",&p_in);  NEXT_LINE(fp); ts=p_in;
    fscanf(fp,"%lg",&p_in);  NEXT_LINE(fp); delta=p_in;
                             NEXT_LINE(fp);
    fscanf(fp,"%d",&nsteps); NEXT_LINE(fp);
    fscanf(fp,"%d",&plot_step);       NEXT_LINE(fp);
    fscanf(fp,"%d",&write_filament);  NEXT_LINE(fp);
    fscanf(fp,"%d",&hist_step);       NEXT_LINE(fp);
    fscanf(fp,"%d,%d,%d",&hist_x,&hist_y,&hist_z); NEXT_LINE(fp);
                                            NEXT_LINE(fp);
    fscanf(fp,"%d",&initial_field);         NEXT_LINE(fp);
    fscanf(fp,"%d",&ic_type);               NEXT_LINE(fp);
    fscanf(fp,"%d", &simulating_resolution); 
    fscanf(fp,",%d",&rotating_resolution);  NEXT_LINE(fp);
    fscanf(fp,"%d",&binary_write);          NEXT_LINE(fp);
                                            NEXT_LINE(fp);
    fscanf(fp,"%d",&verbose);

    fclose(fp);
  }

  /* ----------------------------------------------------------------- 
   * Process input parameters and write various things to screen 
   *
   * Note: I choose to read length_x and then use NY and NZ to
   * determine length_y and length_z.  You can easily change this, the
   * only requirement is that grid_h be the same for each direction.
   * ----------------------------------------------------------------- */

#if NINETEENPT 
  #define WEIGHT 6.
  #define STABILITY_LIMIT (3.*grid_h*grid_h/8.)
#else
  #define WEIGHT 1.
  #define STABILITY_LIMIT (grid_h*grid_h/6.)
#endif

  grid_h    = length_x/(NX-1);
  length_y  = grid_h * (NY-1);
  length_z  = grid_h * (NZ-1);

  dt         = ts*STABILITY_LIMIT;
  dt_o_wh2   = dt/(WEIGHT*grid_h*grid_h);
  dtDv_o_wh2 = Dv*dt_o_wh2;
  one_o_a    = 1.0/a_param; 
  b_o_a      = b_param/a_param; 
  dt_o_eps   = dt*one_o_eps; 
  dt_o_2eps  = dt_o_eps/2.; 

  if(verbose) {
    printf("\n\nModel Parameters: \n");
    printf("a     = %g\n", a_param);
    printf("b     = %g\n", b_param);
    printf("eps   = 1/%g = %g\n", one_o_eps, 1.0/one_o_eps);
    printf("L_x, L_y, L_z = %g, %g, %g\n", length_x, length_y, length_z);
    printf("Dv    = %g\n", Dv);
    printf("\nNumerical Parameters: \n");
    printf("NX = %-6d NY = %-6d NZ = %-6d ts  = %-10g delta  = %-10g\n", 
	   NX, NY, NZ, ts, delta);
    printf("dt   = %-10g dt/eps = %-10g grid_h = %-10g\n", 
	   dt, dt_o_eps, grid_h);

#if NINETEENPT
    printf("\n-- Using 19 point Laplacians");
#else
    printf("\n-- Using  7 point Laplacians");
#endif

#if EXPLICIT
    printf("; explicit kinetics");
#else
    printf("; implicit kinetics");
#endif
#if SPLIT
    printf("; operator splitting --\n");
#else
    printf(" --\n");
#endif

    printf("\nNumber of time steps = %d\n", nsteps);
    printf("  time steps per plot (and/or filament computation) = %d\n", 
	   plot_step);
    if(write_filament) printf("  writing filament data\n");
    else printf("  not writing filament data\n");
    if(hist_step) printf("  writing history data\n");
    else printf("  not writing history data\n");
  }

  /* ------------------ 
   * Perform some tests 
   * ------------------ */

  if( V_DIFF_ON && Dv==0.) {
    fprintf(stderr,"***** V_DIFF_ON is 1 and Dv == 0. ******\n");
    exit(1);
  }
  if(!V_DIFF_ON && Dv!=0.) {
    fprintf(stderr,"***** V_DIFF_ON is 0 and Dv != 0. ******\n");
    exit(1);
  }
  if(hist_step && (
     hist_x<1 || hist_x>NX || 
     hist_y<1 || hist_y>NY || 
     hist_z<1 || hist_z>NZ ) ) {
    fprintf(stderr,"***** history point out of range ******\n");
    exit(1);
  }
  if(ts > 1.0 ) {
    fprintf(stderr,"***** ts > 1 (the diffusion stability limit) ******\n");
    exit(1);
  }

  /* ------------ 
   * Final things
   * ------------ */

  Allocate_memory();
  Read_ic(); 
  Step_ini();
  if(hist_step) history_file = fopen("history.dat", "w");
  if(write_filament) filament_file = fopen("filament.dat", "w"); 
  Draw_ini(argc, argv, initial_field);
}
/* ========================================================================= */

void Allocate_memory (void)
{
  /* -----------------------------------------------------------------------
   * There are NX, NY and NZ actual grid points in each direction.
   * field_size = (NX+2)*(NY+2)*(NZ+2) because of the way boundaries are
   * treated.  See ezscroll.h for definition of NX, NY, NZ.
   *                                                                         
   * I try to allocate one big block of memory for everything (u, v,
   * sigma_u, and if needed sigma_v) and then set appropriate pointers.  If
   * this fails, try for blocks of size 2*field_size, which is the smallest
   * block I can accept.  The handling of memory can be changed with
   * appropriate changes to the macros INDEX etc in ezscroll.h.
   * ----------------------------------------------------------------------- */

  field_size = (NZ+2)*(NY+2)*(NX+2);

#if V_DIFF_ON
  fields = (Real *) calloc(6*field_size, sizeof(Real));
#else
  fields = (Real *) calloc(4*field_size, sizeof(Real));
#endif

  if (fields != NULL) {
    /* --------------------------------------------------- 
     * We have one big block of memory.  Set some pointers 
     * --------------------------------------------------- */
    u       = fields;
    v       = fields +   field_size;
    sigma_u = fields + 2*field_size;
#if V_DIFF_ON
    sigma_v = fields + 4*field_size;
#endif
    if(verbose>2) printf("Memory allocated in one block.\n");
  }
  else {
    /* ------------------------------------------------------------------- 
     * Did not get one big block. Try to find blocks of size 2*field_size.
     * ------------------------------------------------------------------- */

#define CALL_CALLOC (Real *) calloc(2*field_size, sizeof(Real))

    if(    ((fields  = CALL_CALLOC ) != NULL) 
	&& ((sigma_u = CALL_CALLOC ) != NULL) 
#if V_DIFF_ON
	&& ((sigma_v = CALL_CALLOC ) != NULL) 
#endif
       ) {
      /* Found memory
       * ------------ */
      if(verbose>2) printf("Using multiple memory blocks.\n");
    }
    else {
      /* Could not find enough memory.
       * ----------------------------- */
      fprintf(stderr, "\n ****Error: Not enough memory available\n");
      exit(-1);
    }
  }
}
/* ========================================================================= */

void Finish_up (void)
{
  QuitX();
  Write_fc(); 
  if(hist_step) fclose(history_file);
  if(write_filament) fclose(filament_file); 
}
/* ========================================================================= */

void Write_filament_data (float x0, float y0, float z0, 
			  float x1, float y1, float z1) 
{
  /* This routine for outputting the filament data is called from
   * filament_in_cube() in ezmarching.c where the filament is computed.  */

  fprintf(filament_file, "%.5f %.5f %.5f %.5f %.5f %.5f %.5f\n", 
	  dt*(Real)istep, x0, y0, z0, x1, y1, z1);
}
/* ========================================================================= */

void Write_history (int wrt_step)
{
  fprintf(history_file, "%.5f %.5f %.5f\n", dt*(Real)wrt_step, 
	  U(hist_x,hist_y,hist_z), V(hist_x,hist_y,hist_z) ); 

  if(verbose>2) {
    printf("istep = %d", wrt_step);
    printf("; (u,v) = %.5f, %.5f", 
	   U(hist_x,hist_y,hist_z), V(hist_x,hist_y,hist_z) ); 
    printf("\n");
  }
}
/* ========================================================================= */

void Write_fc (void)
{
  /* Write final condition file */

  FILE *fp;
  time_t tt1;
  int i,j,k;

  time(&tt1); 
  fp = fopen("fc.dat", "w");

  fprintf(fp,"Model Parameters: a, b, 1/eps, Lx, Ly, Lz, Dv = ");
  fprintf(fp,"%g, %g, %g, %g, %g, %g, %g\n", a_param, b_param, one_o_eps, 
	  length_x, length_y, length_z, Dv);
  fprintf(fp,"Numerical Parameters: NX, NY, NZ, ts, delta = ");
  fprintf(fp,"%d, %d, %d, %g, %g \n", NX, NY, NZ, ts, delta);
  fprintf(fp,"File written: %s",ctime(&tt1));
  fprintf(fp,"Comments: 3D \n");
  fprintf(fp,"\n");
  fprintf(fp,"\n");
  fprintf(fp,"\n");
  fprintf(fp,"\n");
  fprintf(fp,"\n");

  if(binary_write) {
    /* Write binary data */
    fprintf(fp,"Binary values of u and v follow\n");
    for(k=1;k<=NZ;k++) {
      for(j=1;j<=NY;j++) {
	fwrite(&U(1,j,k), sizeof(Real), NX, fp);
      }
    }
    for(k=1;k<=NZ;k++) {
      for(j=1;j<=NY;j++) {
	fwrite(&V(1,j,k), sizeof(Real), NX, fp);
      }
    }
  }
  else {
    /* Write ascii data */
    fprintf(fp,"Ascii values of u and v follow\n");
    for(k=1;k<=NZ;k++) {
      for(j=1;j<=NY;j++) {
	for(i=1;i<=NX;i++) {
	  fprintf (fp, "%g %g\n", (float)U(i,j,k), (float)V(i,j,k) );
	}
      }
    }
  }  
  fclose(fp); 
}
/* ========================================================================= */

void Read_ic (void)
{
  /* Reads initial condition file (ic.dat) if it exists, otherwise calls
   * Generate_ic() to generate new initial condition. */

  double u_in, v_in;
  Real   *u_tmp, *v_tmp, rx, ry, rz;
  int    nx_ic, ny_ic, nz_ic, npts_ic2, npts_ic3, index, i_tmp, j_tmp, k_tmp, 
         i, j, k;
  char   f_type, dummy;
  FILE  *fp;

  if((fp=fopen("ic.dat","r"))==NULL) { 
    Generate_ic();
    return;
  }

  /* Read nx_ic etc following = sign on second line of file */
  NEXT_LINE(fp);                                     
  while( (dummy=getc(fp)) != '=');                   
  fscanf(fp, "%d, %d, %d", &nx_ic, &ny_ic, &nz_ic);  

  /* Skip to 10th line and read first character to determine type 
     B(inary) or A(scii) */
  for(i=0;i<8;i++) NEXT_LINE(fp); 
  f_type = getc(fp); NEXT_LINE(fp); 
  
  if ( (f_type !='B') && (f_type !='A') ) {
    if(verbose) 
      printf("\n ic.dat exists but of unrecognized type Binary or Ascii \n"); 
    exit(1);
  }

  if(verbose) printf("\nReading ic.dat with nx, ny, nz = %d, %d, %d... \n\n", 
		     nx_ic, ny_ic, nz_ic);

  npts_ic2 = nx_ic * ny_ic;  
  npts_ic3 = npts_ic2 * nz_ic;

  /* Allocate temporary memory and read from file */

  u_tmp =(Real *) malloc((unsigned)(npts_ic3)*sizeof(Real));
  v_tmp =(Real *) malloc((unsigned)(npts_ic3)*sizeof(Real));

  if(f_type =='B') {    
    /* Binary data file */
    fread(u_tmp, sizeof(Real), npts_ic3, fp);
    fread(v_tmp, sizeof(Real), npts_ic3, fp);
  }
  else {          
    /* Ascii data file */
    for(index=0;index<npts_ic3;index++) {
      fscanf (fp, "%lg %lg\n", &u_in, &v_in);
      u_tmp[index] = u_in; v_tmp[index] = v_in;
    }
  }

  /* Copy into u and v */
  rx = (nx_ic-1.0)/(NX-1.0);
  ry = (ny_ic-1.0)/(NY-1.0);
  rz = (nz_ic-1.0)/(NZ-1.0);

  for(k=1;k<=NZ;k++) {
    k_tmp = npts_ic2 * (int)(rz*(k-1));
    for(j=1;j<=NY;j++) {
      j_tmp = nx_ic * (int)(ry*(j-1));
      for(i=1;i<=NX;i++) {
	i_tmp = (int)(rx*(i-1));
	U(i,j,k) = u_tmp[i_tmp + j_tmp + k_tmp];
	V(i,j,k) = v_tmp[i_tmp + j_tmp + k_tmp];
      }
    }
  }

  free(u_tmp);
  free(v_tmp);  
}
/* ========================================================================= */

void Generate_ic (void)
{
  /* Generate new initial condition of type ic_type.  Some cases are given,
   * you might want to add more. */

  Real x_box, y_box, z_box, c_box;
  Real z1_r, z1_i, z2_i, z2_r, p_i, p_r, theta;
  int i, j, k;

  if(verbose) 
    printf("\nGenerating initial condition of ic_type %d. \n\n", ic_type);

  if(ic_type>0) {

    /* ------------------------------------------ 
     * Compute ic using complex polynomial method
     * ------------------------------------------ */

    for(k=1;k<=NZ;k++) {
      for(j=1;j<=NY;j++) {
	for(i=1;i<=NX;i++) {

	  /* Scale the simulation volume to cube [-c_box,c_box]^3.  Generally
	   * c_box=1, although we allow the possibility of controlling the
	   * scale of filaments generated from polynomials: a larger c_box
	   * corresponds to a smaller filament size.  For example, a scroll
	   * ring in a cubic box will have diameter \simeq 0.5*Lx/c_box.
	   *
	   * In some cases, e.g. the twisted scroll ring, it is useful to
	   * scale the simulation volume to [-c_box,c_box]^2 x
	   * (-infty,infty). This gives a 2pi change of phase from top to
	   * bottom for twisted scroll ring. */

	  c_box = 1.0;

	  x_box = c_box * (2.*(i-1.)/(NX-1.) - 1.);
	  y_box = c_box * (2.*(j-1.)/(NY-1.) - 1.);
	  z_box = c_box * (2.*(k-1.)/(NZ-1.) - 1.);

#if 0	  /* Scale [1,NZ] to (-infty,infty) */  
	  z_box = tan(M_PI/2. * ( 1.99*(k-1.)/(NZ-1.) - 1.) );
#endif

	  /* Mapping s: R^3 -> C^2 */
	  z1_r = x_box;
	  z1_i = y_box;
	  z2_r = z_box;
	  z2_i = (x_box*x_box + y_box*y_box + z_box*z_box) - 0.25;

	  /* Compute real and imaginary parts of polynomial p: C^2 -> C */
	  switch (ic_type) {
	  case 1:  
	    /* Straight Scroll: p(z1,z2) = z1 */
	    p_r = z1_r;
	    p_i = z1_i;
	    break;
	  case 2:
	    /* Twisted Straight Scroll: p(z1,z2) = z1 * e^(i*pi*z2_r) 
	     * (Not a polynomial in z1 and z2) */
	    p_r = z1_r * cos(M_PI*z2_r) - z1_i * sin(M_PI*z2_r);
	    p_i = z1_r * sin(M_PI*z2_r) + z1_i * cos(M_PI*z2_r);
	    break;
	  case 3:
	    /* Scroll Ring: p(z1,z2) = z2 */
	    p_r = z2_r;
	    p_i = z2_i;
	    break;
	  case 4:
	    /* Twisted Scroll Ring: p(z1,z2) = z1 * z2 */
	    p_r = z1_r * z2_r - z1_i * z2_i;
	    p_i = z1_r * z2_i + z1_i * z2_r;
	    break;
	  case 5:
	    /* Trefoil Knot: p(z1,z2) = (0.6*z1)^3 + z2^2 */
	    z1_r*=0.6;
	    z1_i*=0.6;
	    p_r =  z1_r*z1_r*z1_r - 3.*z1_r*z1_i*z1_i + z2_r*z2_r - z2_i*z2_i;
	    p_i = -z1_i*z1_i*z1_i + 3.*z1_r*z1_r*z1_i + 2.*z2_r*z2_i;
	    break;
	  default:
	    /* good idea to set some default for out-of-range ic_type */
	    if(verbose) printf("ic_type out of range\n");
	    exit(1);
	  }

	  /* Map phi: C^1 -> R^k, i.e. from (p_i, p_r) to (u,v).  Only
           * the phase, theta, is needed.  */

#define THETA_0 (1.0*M_PI)

	  theta = atan2((double) (p_i), (double) (p_r) );
          if (theta<0) theta += 2*M_PI;   

          if( (0<=theta) && (theta<THETA_0) ) {       /* excited */
            U(i,j,k) = 1.0;
            V(i,j,k) = a_param*(1.-theta/THETA_0);
          } else {                                    /* recovering */
	    U(i,j,k) = 0.; 
            V(i,j,k) = a_param*(theta-THETA_0)/(2.*M_PI-THETA_0);
          }

	  /* Rather than the discontinuous U above, can use this for
             nicer looking iso-surfaces of the initial u-field */
	  U(i,j,k) = 0.5*(1.+tanh(10.*sin(theta))); 

	}
      }
    }
  }

  else {

    /* ------------------------------------------ 
     * Compute ic by crossed-concentration method 
     * (similar to that used in ezspiral).  
     * ------------------------------------------ */
    
    for(k=1;k<=NZ;k++) {
      for(j=1;j<=NY;j++) {
	for(i=1;i<=NX;i++) {

	  U(i,j,k) = V(i,j,k) = 0.; 
	  if (i<NX/2) { 
	    if(j>(10+NY/2)) U(i,j,k) = 1.0;  
	    if(k>NZ/2)      V(i,j,k) = a_param/2.;
          }
	  else {
	    if(j<(10+NY/2)) U(i,j,k) = 1.0;
	    if(k<NZ/2)      V(i,j,k) = a_param/2; 
	  }
	}
      }
    }
  }
}
/* ========================================================================= */


